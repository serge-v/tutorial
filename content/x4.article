X4. html forms
21 Oct 2016
Tags: first

Serge Voilokov

* Introduction

We will learn how to create basic interactive web app using go.

For exampe we have a page with an article and want to implement basic comments functionality
so everybody can leave a comment. It can look like this

.html x4/comments.html

* Design an article UI

Article is a html page. It has `form` at the end to submit author and comment back
to the server

	<html>
	<body>

	<h3>Article about something</h3>
	<p>Very long text of the article about something.</p>
	<p><i>By author</i></p>
	<hr>

	<h3>Comments:</h3>
	{placeholder_for_comments}

	<h3>Add comment:</h3>
	<hr>
	<form method="POST">
		comment: <input name="comment" type="input" size="40"><br>
		by: <input name="author" type="input" size="30"><br>
		<input type="submit" value="Add">
	</form>

	</body>
	</html>

When visitor clicks 'Add' button our server receives `http.Request` with
`comment` and `author` values. In response we should return the article along with
added comments.

Save it as article.html

* Create a plan

Our web application should do a lot of things. Programming goes easier when you have a
detailed plan

- Load article file
- Load comments text from file
- If request method is GET write the response and return
- Parse incoming POST request
- Append new comment to all comments
- Save all comments to file
- Insert comments to the end of article
- Redirect to itself so next GET method will serve the page

* Create program skeleton

Lets convert our human readable plan to the Go language.
It is mostly line to line conversion from the plan

.code x4/form.go /^func requestHandler/,/^}/

So we need to implement all these functions

.code x4/form.go /^func loadArticleFile/
.code x4/form.go /^func loadCommentsFile/
.code x4/form.go /^func insertComments/
.code x4/form.go /^func parseRequest/
.code x4/form.go /^func appendComment/
.code x4/form.go /^func saveCommentsFile/

Copy `main` function from [[x2][X2]].

And copy header import section

	package main

	import (
		"fmt"
		"net/http"
		"net/http/cgi"
		"log"
		"os"
	)

* Implementing internals

parseRequest takes request and returns comment and author of the comment as a strings
.code x4/form.go /^func parseRequest/,/^}/

loadCommentsFile returns all saved comments text
.code x4/form.go /^func loadCommentsFile/,/^}/

See documentation about [[https://golang.org/pkg/io/ioutil/#ReadFile][ioutil.ReadFile]].

appendComment appends row to all text and returns all text as a string
.code x4/form.go /^func appendComment/,/^}/

Function uses [[https://golang.org/pkg/html/#EscapeString][html.EscapeString]] so add
`html` package to the `import` section.

loadArticleFile identical to loadCommentsFile
.code x4/form.go /^func loadArticleFile/,/^}/

saveCommentsFile saves text to file. It uses [[https://golang.org/pkg/io/ioutil/#WriteFile][ioutil.WriteFile]]
.code x4/form.go /^func saveCommentsFile/,/^}/

`[]byte(text)` statement convert string to sequence of bytes.

0666 -- permissions attributes of a file in octal format.

insertComments inserts comments to the end of article and returns article as a string
.code x4/form.go /^func insertComments/,/^}/

Add `strings` to `import` section.

* Final steps

Run

	go run form.go

Copy to the prod

	./ocean -deploy form

Check [[http://wet.voilokov.com/form][http://wet.voilokov.com/form]].
