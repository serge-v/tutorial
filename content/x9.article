X9. Chat database
18 Nov 2016
Tags: chat

Serge Voilokov

* Introduction

I made quick and dirty user management in chat server based on files.
It works for couple of users but it will fail eventually.
You will replace file operations with database operations.

* Current file based registration process

- chat server provides `login.html` page on https://localhost:8085.
- new user goes to `login.html` page and enters registration info.
- login.html page calls `/register` handler.
- `/register` handler emails user info and a random confirmation link to adminintrator (me). And saves random string to the registration file.
- I manually verify user info and forward it to the new user.
- User click link from email.
- Link calls `/create` handler.
- `/create` handler reads registration file and compares random strings.
- If random strings are match `/create` handler generates a password and writes it to the user's file.
- Then it redirects user to the login page.

* Current file based login process

- chat server provides `login.html` page on https://localhost:8085.
- new user goes to `login.html` page and enters user and password.
- login.html page calls `/auth` handler.
- `/auth` handler reads a pasword from user's file and if passwords match generates a session token.
- `/auth` handler responds to the user with Token session cookie and redirects to the `index.html` page.
- `index.html` checks session cookie and enters the user to chat.

* What to replace

We need to replace registration files with registrations table.

Also we need to replace users files with users table.

* We need a database
We can start with Sqlite3 database. It works using "database/sql" package like MySQL.
So later it is easy to switch to MySQL. Sql statements will remain the same.

* We need a tables

- `registrations` table. Contains id, timestamp, name, email, random, created fields.
- `users` table. Id, creation date, name, password, email, session token. Probably user settings like `enable_notifications`, `colors`, `last_message_time` etc but I am not sure. Also this table will be used to search users.
- `channels` table. There is no channels for now. All chat is in one window. So we need to separate conversations somehow.
- `messages` table. All sent messages should be kept as a history. We need to provice search by time range, user name, channel name and text.
- `version` table. Contains version number. For future upgrades it is useful to know current database schema version.

* Database package

Lets put all database operations to the separate package called `chat/db`.

Create a db package for db operations

	mkdir src/chat/db

Create db.go file

	touch src/chat/db/db.go

Open `db.go` and put this content
.code x9/db/db.go /^package db$/,/^var db/
	
* DB operations

Use [[/blog/x6][X6]] as an example.

** Connect function
	
The same as in X6 except different `Open` parameters.
.code x9/db/db.go /^func ConnectServer/,/^}/

** Tables creation
Tables statements
.code x9/db/db.go /^const sql_version/,/^}/

Tables creation
.code x9/db/db.go /^func CreateTables/,/^}/

** Version table
Copy these functions and use as an example for registrations and users tables.
.code x9/db/db.go /^func UpdateVersion/,/^}/
.code x9/db/db.go /^func GetVersion/,/^}/


** Functions for user registration
AddRegistration creates a record in registrations table. Record contains
id, timestamp, user name, email and randomly generated string (farsh).
.code x9/db/db.go /^func AddRegistration/,/^}/
	
FindPendingRegistration searches for peding registration.
.code x9/db/db.go /^func FindPendingRegistration/,/^}/

CompleteRegistration marks registration as completed and creates user record in user
table with a random password.
.code x9/db/db.go /^func CompleteRegistration/,/^}/

** Functions for user manipulation

LoginUser searches user in users table and if found generates session token
.code x9/db/db.go /^func LoginUser/,/^}/

AuthUser searches a user by id and session token

.code x9/db/db.go /^func AuthUser/,/^}/

Put all of them into `db.go` file. Do not implement them yet. We need to create the test
programs first which will simulate registration and login process.

* Unit tests

To make sure our DB operations work correctly we will create a test programs which will
simulate a real chat server.

Go language has a builtin mechanism for writing unit tests.

Create a file `src/chat/db/db_test.go`
.code x9/db/db_test.go /^package/,/^var username/
	
Put TestRegistration function. This function simulates "User registration process".

.code x9/db/db_test.go /TestRegistration/,/^}/

Run test

	cd src/chat/db
	go test

Test will fail with the error

	--- FAIL: TestRegistration (0.00s)
		db_test.go:34: cannot create registration

So you need to implement these functions in order of TestRegistration start working

	AddRegistration
	FindPendingRegistration
	CompleteRegistration

You need also
.code x9/db/db.go /generateRandomString/,/^}/


Then write login test

.code x9/db/db_test.go /TestLogin/,/^}/


and implement functions

	LoginUser
	AuthUser

Fix the finctions and rerun

	go test

until it will display PASS message. When both tests pass the database functions are
ready to replace file operations.




























