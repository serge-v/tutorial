X5. Packages
22 Oct 2016
Tags: first

Serge Voilokov

* Introduction

[[x2/helloworld.go][helloworld.go]] and [[x2/worldtime.go][worldtime.go]] have the same
piece of code in `main` function. We can create a package with this common code and
our two programs will use the same package.

* Creating a package

Create lib directory in your working directory and create a file lib.go in it

	c:\work
		├── lib
		│    └── lib.go
		│
		├── helloworld.go
		└── worldtime.go

lib/lib.go will contain the `lib.Serve()` function which takes a request handler and starts local server or
runs CGI. We should only pass our handler to it.

.code x5/lib/lib.go

`main` function in helloworld.go becomes

.code x5/helloworld.go

worldtime.go becomes

.code x5/worldtime.go

* Summary

So what are advantages of using packages?

- We eliminated duplicate code in `main` functions by moving it to the package. Programs became shorter.
- We do not need to duplicate `main` function in future programs. We just using `./lib` module.

Disadvantages?

- Many programs depend on our package so we should carefully modify it because we can break all programs in one shot.

* External packages

There are many external packages for Golang. For working with Mysql run this command

	go get github.com/go-sql-driver/mysql
	
It will download mysql package which contains Mysql golang client. Import into a program using 

	import (
		"database/sql"
		_ "github.com/go-sql-driver/mysql"
	)
	
We will work with Mysql in our [[x6][X6]] excercise.

