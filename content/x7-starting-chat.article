X7. Starting chat project
1 Nov 2016
Tags: chat

Serge Voilokov

* Introduction

Lets do something real. We need a chat application. Something like this

.html x7/chatmock.html

* Spec

Lets write a spec(ification). Specification is a list and description of features and requirements
that our program should have.

Technical details

- Runs on wet.voilokov.com since I already have it.
- Web UI uses websockets to communicate to the server because it provides immediate delivery and full duplex communication.
- Minimal web UI, i.e. html generates on server mostly because we hate to write browser javascript code.

Features

- As I said before it will be web UI accessible from everywhere.
- Only one chat room.
- Browser notification when message arrives.
- Primitive authentification by token.
- Log chat to file.
- On connect client receives recent chat history.
- Encryption.
- Console client because I like black terminals.

* Get the project from github

We need to keep history of the changes so we need a source control for this project.
I created a project on github [[https://github.com/serge-v/chat.git][https://github.com/serge-v/chat.git]]
and added you to the collaborators. It has a primitive chat web UI and chat server.

Go to home directory and clone the repository locally

	cd ~
	git clone https://github.com/serge-v/chat.git
	cd chat

* Generate security certificates

I enabled encryption in chat server because it was easy in Go, so you need to generate a
certificate. Run

	./gencert.sh

It will create server.key (private key) and server.pem (web server certificate) in local directory.

* Create debug char users

You need some users for debugging to login to chat. Create a file src/chat/auth/users_private.go
with this content

	package auth

	func init() {
		list = append(list, &UserAuth{"user1", "111", "2139821398214124"})
		list = append(list, &UserAuth{"user2", "222", "2132190213902130"})
	}

UserAuth structure is defined in src/chat/auth/users.go

	type UserAuth struct {
		Name string     // name of the user
		Password string // password
		Token string    // randomly generated token stored in cookie
	}



* Run chat server locally

Take websocket package

	go get golang.org/x/net/websocket

Start

	./run-local

* How to test it

Open [[https://localhost:8085][https://localhost:8085]]. It will open login page. Use
user1 or user2 to login to chat.

* First task

I want you to make a change in src/chat/chatd/chatd.go. Move function called `rgb2xterm`
into new package. This package will have utility functions.

Create a new package `chat/util` and put `rgb2xterm` to it. Then in src/chat/chatd/chatd.go
import this package and use `util.Rgb2xterm` functon.

* Send you changes for merging

When you done with your changes we need to merge them into main branch.
Read [[x10][X10]] how to do it.








	
















