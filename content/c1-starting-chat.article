C1. Starting chat project
1 Nov 2016
Tags: chat

Serge Voilokov

* Introduction

Lets do something real. We need a chat application. Something like this

.html x7/chatmock.html

* Spec

Lets write a spec. Specification is a list and description of features and requirements
that our program should have.

Technical details

- Runs on wet.voilokov.com since I already have it.
- Web UI uses websockets to communicate to the server because it provides immediate delivery and full duplex communication.
- Minimal web UI, i.e. html generates on server mostly because we hate to write browser javascript code.

Features

- As I said before it will be web UI accessible from everywhere.
- Only one chat room.
- Browser notification when message arrives.
- Primitive authentication by token.
- Log chat to file.
- On connect client receives recent chat history.
- Encryption.
- Console client because I like black terminals.

* Server architecture

Main function

- init
- start worker go routine
- start websocket server on ws://localhost:8085/ws
- start web server on http://localhost:8085

Init

- generate index.html file with valid websocket url
- create client list
- create connectChan, disconnectChan, broadcastChan channels

Channels will be used for communicating between websocket, clients and worker go routines.

Web server

- serves UI index.html page to the clients

Websocket server

- internally it starts go routine which listen for connections
- on connection it calls our onWebsocketConnection function
- onWebsocketConnection creates a client, sends client to the connectedChan ans starts client routine

Worker go routine

- listen on broadcast channel for a message
- listen on connectChan channel for a new client
- listen on disconnectChan channel for client disconnect

- when client is connected add client to the client list; and
- notify all clients.
- when client is disconnected remove the client from the list; and
- notify all clients.
- when message arrives save it to the file; and
- resend the message to all clients.

Client go routine

- wait for a message
- when message received send it to broadcast channel
- on disconnect send message to client_disconnected channel
