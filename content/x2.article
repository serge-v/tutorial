X2. Deploy helloworld and worldtime to production
19 Oct 2016
Tags: first

Serge Voilokov

* Introduction

We developed and tested helloworld and worldtime programs locally. To make it available
for a public we need to deploy it to our cloud web server.

I created virtual web server [[http://wet.voilokov.com][wet.voilokov.com]] on some cloud provider.
We will deploy our programs to that server so they will be available as

[[http://wet.voilokov.com/helloworld][http://wet.voilokov.com/helloworld]]

and

[[http://wet.voilokov.com/worldtime][http://wet.voilokov.com/worldtime]].

* Adopt code for Apache Web Server

Localy we run our programs using builtin web server to serve content on localhost:8085.
In production Apache Web Server is already started on port 80.

We should modify the code to use cgi interface instead of starting local server.

So our `main` function

.code x1/helloworld.go /^func main/,/^}/

now uses `local` variable to switch between local and cgi mode.

.code x2/helloworld.go /^var local/,/^}/

Also add `flag` to the import section

	import (
		"fmt"
		"net/http"
		"net/http/cgi" // add this,
		"log"
		"flag"         // and this !!!
	)

We can run and debug it locally as a web server

	helloworld -local

And in production Apache will run it without parameters something like

	REQUEST_METHOD=GET SERVER_PROTOCOL=HTTP/1.1 helloworld

You can run this command also and you will see full http response

	Status: 200 OK
	Content-Type: text/html; charset=utf-8

	hello world. local = false


Of course we can install Apache on our computer and discard `ListenAndServe` but I wouldn't
 do it. Three lines of code is simpler to maintain than Apache.


* Building for production

Our local OS is Windows but production runs FreeBSD so we need to recompile source for a
differrent architecture. It is easy in golang.

	GOOS=freebsd GOARCH=amd64 go build helloworld.go

Run command to get information about built file

	file helloworld

Result contains `FreeBSD` and `executable` keywords so probably everything is OK

	helloworld: ELF 64-bit LSB executable, x86-64, version 1 (FreeBSD), statically linked, not stripped

* Deploying to production

Now we should copy `helloworld` executable to the production server. I sent to you special
`ocean` tool by email. You need to run to see if it is working

	ocean -status

It will show contents of `/usr/local/www/wet` directory on server

	-rwxr-xr-x  1 freebsd  freebsd  8001339 Oct 19 02:08 blog
	drwxr-xr-x  4 freebsd  freebsd      512 Oct 19 02:16 content
	drwxrwxrwx  2 root     wheel        512 Jul 18 01:26 logs
	-rwxr-xr-x  1 root     wheel    5515668 Oct 19 01:46 main
	drwxr-xr-x  2 freebsd  freebsd      512 Oct 17 11:36 template
	-rw-r--r--  1 root     wheel        388 Oct 19 01:41 wet.conf

Make sure `helloworld` and `ocean` reside in the same directory.
To deploy `helloworld` to the prod run

	ocean -deploy helloworld

Make sure `helloworld` appeared in directory listing. Run

	ocean -status

Now check [[http://wet.voilokov.com/helloworld][http://wet.voilokov.com/helloworld]].
Browser should show page with this text

	hello world. local = false

* Deploy worldtime

Put new code to worldtime.go

	var local = flag.Bool("local", false, "start local server for debugging")

	func main() {
		flag.Parse()

		if *local {
			fmt.Println("=== starting server on http://localhost:8085/ ===")
			http.HandleFunc("/", hello)
			log.Fatal(http.ListenAndServe(":8085", nil))
			return
		}

		err := cgi.Serve(http.HandlerFunc(hello))
		if err != nil {
			panic(err)
		}
	}

Run

	GOOS=freebsd GOARCH=amd64 go build worldtime.go
	ocean -deploy worldtime
	ocean -status

Check [[http://wet.voilokov.com/worldtime][http://wet.voilokov.com/worldtime]]

* Summary

I summarized all above complicated steps into short instruction. That's all you need.

To develop and debug use the cycle

	// edit your code

	// build
	go build worldtime.go

	// run
	worldtime -local

	// check
	// refresh browser on http://localhost:8085/
	
	// stop
	// Ctrl+C to stop server

	// repeat

Deploy to the prod

	// build for the FreeBSD
	GOOS=freebsd GOARCH=amd64 go build worldtime.go

	// deploy
	ocean -deploy helloworld

	// check
	// refresh http://wet.voilokov.com/worldtime








